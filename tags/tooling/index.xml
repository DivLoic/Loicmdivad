<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tooling on Loïc M. Divad</title><link>https://blog.loicmdivad.com/tags/tooling/</link><description>Recent content in tooling on Loïc M. Divad</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 15 Mar 2020 09:00:00 +0100</lastBuildDate><atom:link href="https://blog.loicmdivad.com/tags/tooling/index.xml" rel="self" type="application/rss+xml"/><item><title>Kafka topic creation with Scala and Gradle</title><link>https://blog.loicmdivad.com/posts/2020/03/kafka-topic-creation-with-scala-and-gradle/</link><pubDate>Sun, 15 Mar 2020 09:00:00 +0100</pubDate><guid>https://blog.loicmdivad.com/posts/2020/03/kafka-topic-creation-with-scala-and-gradle/</guid><description>If you develop a piece of software dealing with data systems, you are probably facing a few prerequisites. For example, you may need a file system to be mounted or a database table to be created. The same applies to event stream applications using Apache Kafka® as an event log. They need topics, schemas and ACLs to be created first, in order to run correctly.</description></item></channel></rss>